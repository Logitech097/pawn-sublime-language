<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>pwn</string>
		<string>inc</string>
	</array>

	<key>foldingStartMarker</key>
	<string>(?x)
		 /\*\*(?!\*)
		|^(?![^{]*?//|[^{]*?/\*(?!.*?\*/.*?\{)).*?\{\s*($|//|/\*(?!.*?\*/.*\S))
	</string>

	<key>foldingStopMarker</key>
	<string>(?&lt;!\*)\*\*/|^\s*\}</string>

	<key>name</key>
	<string>Pawn</string>

	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#special_block</string>
		</dict>
		<dict>
			<key>include</key>
			<string>source.c</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\bdelete\b(\s*\[\])?|\bnew\b(?!])</string>
			<key>name</key>
			<string>keyword.control.pawn</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(f|m)[A-Z]\w*\b</string>
			<key>name</key>
			<string>variable.other.readwrite.member.pawn</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)
					(?:  ^                                 # begin-of-line
					  |  (?: (?&lt;!else|new|=) )             #  or word + space before name
					)
					((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name
					 \s*(\()                           # start bracket or end-of-line
				</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.pawn</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.destructor.pawn</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)
					(?:  ^                                 # begin-of-line
					  |  (?: (?&lt;!else|new|=) )             #  or word + space before name
					)
					((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name
					 \s*(\()                           # terminating semi-colon
				</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.pawn</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.destructor.prototype.pawn</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
	</array>
	<key>repository</key>
	<dict>

		<key>angle_brackets</key>
		<dict>
			<key>begin</key>
			<string>&lt;</string>
			<key>end</key>
			<string>&gt;</string>
			<key>name</key>
			<string>meta.angle-brackets.pawn</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#angle_brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>

		<key>block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>meta.block.pawn</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.function.any-method.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.c</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
					(
						(?!while|for|do|if|else|switch|enumerate|return|r?iterate)(?: \b[A-Za-z_][A-Za-z0-9_]*+\b | :: )*+                  # actual name
					)
					 \s*(\()</string>
					<key>name</key>
					<string>meta.function-call.c</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>

		<key>constructor</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
					(?:  ^\s*)                             # begin-of-line
					((?!while|for|do|if|else|switch|enum)[A-Za-z_][A-Za-z0-9_:]*) # actual name
					 \s*(\()                            # start bracket or end-of-line
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.pawn</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.c</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.constructor.pawn</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$base</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
					(:)                            # begin-of-line
					((?=\s*[A-Za-z_][A-Za-z0-9_:]* # actual name
					 \s*(\()))                      # start bracket or end-of-line
					</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\{)</string>
					<key>name</key>
					<string>meta.function.constructor.initializer-list.pawn</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$base</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>

	<key>scopeName</key>
	<string>source.pawn</string>
	<key>uuid</key>
	<string>26251B18-6B1D-11D9-AFDB-000D93589AF6</string>
</dict>
</plist>
