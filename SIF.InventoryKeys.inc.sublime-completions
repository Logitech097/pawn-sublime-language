{
	"scope": "source.pawn - variable.other.pawn",
	"completions":
	[
		"/*==============================================================================",
		{ "trigger": "Southclaw's Interactivity Framework ", "contents": "Southclaw's Interactivity Framework (${1:SIF})" },
		"	SIF/Overview",
		"		SIF is a collection of high-level include scripts to make the",
		"		development of interactive features easy for the developer while",
		"		maintaining quality front-end gameplay for players.",
		"	SIF/FILENAME/Description",
		"		An extension script for SIF/Inventory that allows players to interact",
		"		with their inventory using key presses.",
		"	SIF/FILENAME/Dependencies",
		"		SIF/Inventory",
		"	SIF/FILENAME/Credits",
		"		SA:MP Team						- Amazing mod!",
		"		SA:MP Community					- Inspiration and support",
		"		Incognito						- Very useful streamer plugin",
		"		Y_Less							- YSI framework",
		"	SIF/FILENAME/Core Functions",
		"		The functions that control the core features of this script.",
		"		native -",
		"		native - SIF/FILENAME/Core",
		"		native -",
		{ "trigger": "native Func", "contents": "native Func(${1:params})" },
		"		{",
		"			Description:",
		"				-",
		"			Parameters:",
		"				-",
		"			Returns:",
		"				-",
		"		}",
		"	SIF/FILENAME/Events",
		"		Events called by player actions done by using features from this script.",
		"		native -",
		"		native - SIF/FILENAME/Callbacks",
		"		native -",
		{ "trigger": "native Func", "contents": "native Func(${1:params})" },
		"		{",
		"			Called:",
		"				-",
		"			Parameters:",
		"				-",
		"			Returns:",
		"				-",
		"		}",
		"	SIF/FILENAME/Interface Functions",
		"		Functions to get or set data values in this script without editing",
		"		the data directly. These include automatic ID validation checks.",
		"		native -",
		"		native - SIF/FILENAME/Interface",
		"		native -",
		{ "trigger": "native Func", "contents": "native Func(${1:params})" },
		"		{",
		"			Description:",
		"				-",
		"			Parameters:",
		"				-",
		"			Returns:",
		"				-",
		"		}",
		"	SIF/FILENAME/Internal Functions",
		"		Internal events called by player actions done by using features from",
		"		this script.",
		{ "trigger": "Func", "contents": "Func(${1:params})" },
		"		{",
		"			Description:",
		"				-",
		"		}",
		"	SIF/FILENAME/Hooks",
		"		Hooked functions or callbacks, either SA:MP natives or from other",
		"		scripts or plugins.",
		"		SAMP/OnPlayerSomething",
		"		{",
		"			Reason:",
		"				-",
		"		}",
		"==============================================================================*/",
		"#include <YSI\y_hooks>",
		"#define _SIF_INVENTORY_KEYS_INCLUDED",
		"/*==============================================================================",
		"	Setup",
		"==============================================================================*/",
		"static",
		"		inv_PutAwayTick				[MAX_PLAYERS],",
		"Timer:	inv_PutAwayTimer			[MAX_PLAYERS];",
		"/*==============================================================================",
		"	Zeroing",
		"==============================================================================*/",
		"/*==============================================================================",
		"	Core Functions",
		"==============================================================================*/",
		"/*==============================================================================",
		"	Internal Functions and Hooks",
		"==============================================================================*/",
		{ "trigger": "hook OnPlayerKeyStateChange", "contents": "hook OnPlayerKeyStateChange(${1:playerid}, ${2:newkeys}, ${3:oldkeys})" },
		{ "trigger": "if", "contents": "if(${1:!IsPlayerInAnyVehicle(playerid})" },
		{ "trigger": "if", "contents": "if(${1:newkeys & KEY_YES})" },
		"		{",
		{ "trigger": "if", "contents": "if(${1:tickcount(})" },
		"				return 0;",
		{ "trigger": "inv_PutAwayTick[playerid] = tickcount", "contents": "inv_PutAwayTick[playerid] = tickcount()" },
		{ "trigger": "new itemid = GetPlayerItem", "contents": "new itemid = GetPlayerItem(${1:playerid})" },
		{ "trigger": "if", "contents": "if(${1:IsValidItem(itemid})" },
		"			{",
		{ "trigger": "if", "contents": "if(${1:GetItemTypeSize(GetItemType(itemid})" },
		"				{",
		{ "trigger": "ShowActionText", "contents": "ShowActionText(${1:playerid}, ${2:"Item too big for inventory"}, ${3:3000}, ${4:150})" },
		"				}",
		"				else",
		"				{",
		{ "trigger": "if", "contents": "if(${1:IsPlayerInventoryFull(playerid})" },
		"					{",
		{ "trigger": "ShowActionText", "contents": "ShowActionText(${1:playerid}, ${2:"Inventory full"}, ${3:3000}, ${4:100})" },
		"					}",
		"					else",
		"					{",
		{ "trigger": "ShowActionText", "contents": "ShowActionText(${1:playerid}, ${2:"Item added to inventory"}, ${3:3000}, ${4:150})" },
		{ "trigger": "ApplyAnimation", "contents": "ApplyAnimation(${1:playerid}, ${2:"PED"}, ${3:"PHONE_IN"}, ${4:4.0}, ${5:1}, ${6:0}, ${7:0}, ${8:0}, ${9:300})" },
		"						stop inv_PutAwayTimer[playerid];",
		{ "trigger": "inv_PutAwayTimer[playerid] = defer PlayerPutItemInInventory", "contents": "inv_PutAwayTimer[playerid] = defer PlayerPutItemInInventory(${1:playerid}, ${2:itemid})" },
		"					}",
		"				}",
		"			}",
		"		}",
		"	return 1;",
		{ "trigger": "timer PlayerPutItemInInventory[300]", "contents": "timer PlayerPutItemInInventory[300](${1:playerid}, ${2:itemid})" },
		{ "trigger": "AddItemToInventory", "contents": "AddItemToInventory(${1:playerid}, ${2:itemid})" },
		"/*==============================================================================",
		"	Interface",
		"==============================================================================*/",
		"pawn"
	]
}