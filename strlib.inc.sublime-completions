{
	"scope": "source.pawn - variable.other.pawn",
	"completions":
	[
		{ "trigger": "sprintf", "contents": "sprintf(${1:fmat}, ${2:args})" },
		{ "trigger": "strgetfirstc", "contents": "strgetfirstc(${1:string})" },
		{ "trigger": "strgetc", "contents": "strgetc(${1:string}, ${2:index})" },
		{ "trigger": "strsize", "contents": "strsize(${1:string})" },
		{ "trigger": "isempty", "contents": "isempty(${1:string})" },
		{ "trigger": "isequal", "contents": "isequal(${1:str1}, ${2:str2}, ${3:ignorecase})" },
		{ "trigger": "strexplode", "contents": "strexplode(${1:output}, ${2:input}, ${3:delimiter}, ${4:limit}, ${5:trim}, ${6:ignorecase}, ${7:size1}, ${8:size2})" },
		{ "trigger": "strimplode", "contents": "strimplode(${1:glue}, ${2:output}, ${3:maxlength}, ${4:args})" },
		{ "trigger": "strreplace", "contents": "strreplace(${1:string}, ${2:search}, ${3:replacement}, ${4:ignorecase}, ${5:pos}, ${6:limit}, ${7:maxlength})" },
		{ "trigger": "strtrim", "contents": "strtrim(${1:string}, ${2:chars}, ${3:edge})" },
		{ "trigger": "strpad", "contents": "strpad(${1:string}, ${2:length}, ${3:substr}, ${4:edge}, ${5:trim_first}, ${6:trim_chars}, ${7:maxlength}, ${8:input})" },
		{ "trigger": "strwrap", "contents": "strwrap(${1:left}, ${2:string}, ${3:right}, ${4:maxlength})" },
		{ "trigger": "strcount", "contents": "strcount(${1:string}, ${2:sub}, ${3:ignorecase}, ${4:count_overlapped})" },
		{ "trigger": "strfromliteral", "contents": "strfromliteral(${1:output}, ${2:input}, ${3:&pos}, ${4:maxlength})" },
		{ "trigger": "strtoliteral", "contents": "strtoliteral(${1:output}, ${2:input}, ${3:maxlength}, ${4:paranoid})" },
		{ "trigger": "strfrombin", "contents": "strfrombin(${1:output}, ${2:input}, ${3:inputlength}, ${4:maxlength})" },
		{ "trigger": "strtobin", "contents": "strtobin(${1:output}, ${2:input}, ${3:maxlength})" },
		{ "trigger": "strcatmid", "contents": "strcatmid(${1:dest}, ${2:source}, ${3:start}, ${4:end}, ${5:maxlength})" },
		{ "trigger": "utf8encode", "contents": "utf8encode(${1:dest}, ${2:source}, ${3:maxlength})" },
		{ "trigger": "utf8decode", "contents": "utf8decode(${1:dest}, ${2:source}, ${3:maxlength})" },
		{ "trigger": "strurldecode", "contents": "strurldecode(${1:output}, ${2:input}, ${3:maxlength})" },
		{ "trigger": "strurlencode", "contents": "strurlencode(${1:output}, ${2:input}, ${3:maxlength}, ${4:pack})" },
		{ "trigger": "ret_strcatmid", "contents": "ret_strcatmid(${1:string}, ${2:source}, ${3:start}, ${4:end})" },
		{ "trigger": "ret_strfrombin", "contents": "ret_strfrombin(${1:input}, ${2:inputlength})" },
		{ "trigger": "ret_strimplode", "contents": "ret_strimplode(${1:glue}, ${2:args})" },
		{ "trigger": "ret_strreplace", "contents": "ret_strreplace(${1:string}, ${2:search}, ${3:replacement}, ${4:ignorecase}, ${5:pos}, ${6:limit})" },
		{ "trigger": "ret_strfromliteral", "contents": "ret_strfromliteral(${1:input}, ${2:&pos})" },
		{ "trigger": "ret_strtoliteral", "contents": "ret_strtoliteral(${1:input}, ${2:paranoid})" },
		{ "trigger": "ret_strtrim", "contents": "ret_strtrim(${1:string}, ${2:chars}, ${3:edge})" },
		{ "trigger": "ret_strpad", "contents": "ret_strpad(${1:string}, ${2:length}, ${3:substr}, ${4:edge}, ${5:trim_first}, ${6:trim_chars})" },
		{ "trigger": "ret_strwrap", "contents": "ret_strwrap(${1:left}, ${2:string}, ${3:right})" },
		{ "trigger": "ret_strurldecode", "contents": "ret_strurldecode(${1:input})" },
		{ "trigger": "ret_strurlencode", "contents": "ret_strurlencode(${1:input}, ${2:pack})" },
		{ "trigger": "ret_utf8encode", "contents": "ret_utf8encode(${1:input})" },
		{ "trigger": "ret_utf8decode", "contents": "ret_utf8decode(${1:input})" },
		{ "trigger": "ret_strpack", "contents": "ret_strpack(${1:source})" },
		{ "trigger": "ret_strunpack", "contents": "ret_strunpack(${1:source})" },
		{ "trigger": "ret_strcat", "contents": "ret_strcat(${1:string1}, ${2:string2})" },
		{ "trigger": "ret_strmid", "contents": "ret_strmid(${1:source}, ${2:start}, ${3:end})" },
		{ "trigger": "ret_strins", "contents": "ret_strins(${1:string}, ${2:substr}, ${3:pos}, ${4:maxlength})" },
		{ "trigger": "ret_strdel", "contents": "ret_strdel(${1:string}, ${2:start}, ${3:end})" },
		{ "trigger": "ret_valstr", "contents": "ret_valstr(${1:value}, ${2:pack})" },
		{ "trigger": "ret_GetPlayerName", "contents": "ret_GetPlayerName(${1:playerid}, ${2:pack})" },
		"trim_left",
		"trim_right",
		"trim_both",
		"edge_left",
		"edge_right",
		"edge_both",
		"pawn"
	]
}